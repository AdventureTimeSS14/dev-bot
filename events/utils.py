import disnake
import requests
from datetime import datetime
from config import (
    AUTHOR,
    GLOBAL_SESSION,
    REPOSITORIES,
)

async def get_github_link(repo_code, number):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ GitHub issue –∏–ª–∏ PR –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Å—ã–ª–∫—É.
    """
    repo_name = REPOSITORIES.get(repo_code)
    if not repo_name:
        print(f"‚ö†Ô∏è –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å –∫–æ–¥–æ–º {repo_code} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

    base_api_url = f"https://api.github.com/repos/{AUTHOR}/{repo_name}"
    pr_url = f"{base_api_url}/pulls/{number}"

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ PR
        pr_response = GLOBAL_SESSION.get(pr_url)
        if pr_response.status_code == 200:
            pr_data = pr_response.json()

            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è PR
            state = pr_data['state']
            merged = pr_data.get('merged', False)
            draft = pr_data.get('draft', False)

            if state == 'closed' and merged:
                state_description = "–ó–∞–º–µ—Ä–¥–∂–µ–Ω üíú"
                embed_color = disnake.Color.purple()
            elif state == 'closed' and not merged:
                state_description = "–ó–∞–∫—Ä—ã—Ç ‚ùå"
                embed_color = disnake.Color.red()
            elif state == 'open' and draft:
                state_description = "–í –¥—Ä–∞—Ñ—Ç–µ ‚öôÔ∏è"
                embed_color = disnake.Color.darker_gray()
            elif state == 'open':
                state_description = "–û—Ç–∫—Ä—ã—Ç ‚úÖ"
                embed_color = disnake.Color.green()
            else:
                state_description = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å ‚ùì"
                embed_color = disnake.Color.default()

            # –°–æ–∑–¥–∞–µ–º embed
            embed = disnake.Embed(
                title=f"PR #{number} - {pr_data['title']}",
                color=embed_color
            )

            embed.add_field(name="–°—Ç–∞—Ç—É—Å PR", value=state_description, inline=True)

            # –°–æ–∑–¥–∞—Ç–µ–ª—å PR
            embed.add_field(name="–°–æ–∑–¥–∞—Ç–µ–ª—å PR üë®‚Äçüíª", value=pr_data['user']['login'], inline=True)

            # –†–µ–≤—å—é–µ—Ä—ã
            requested_reviewers = pr_data.get('requested_reviewers', [])
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ login –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≤—å—é–µ—Ä–∞
            requested_reviewers_logins = [reviewer['login'] for reviewer in requested_reviewers]

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, –∫—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤
            reviews_url = f"{pr_url}/reviews"
            reviews_response = GLOBAL_SESSION.get(reviews_url)
            if reviews_response.status_code == 200:
                reviews_data = reviews_response.json()
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ login —Ä–µ–≤—å—é–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤—ã
                reviewed_reviewers_logins = [review['user']['login'] for review in reviews_data]

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∏ —Ç–µ—Ö, –∫—Ç–æ —É–∂–µ –ø–æ—Å—Ç–∞–≤–∏–ª –æ—Ç–∑—ã–≤ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º)
                all_reviewers = set(requested_reviewers_logins + reviewed_reviewers_logins)  # –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤
                all_reviewers_str = ', '.join(all_reviewers) if all_reviewers else "–ù–µ—Ç —Ä–µ–≤—å—é–µ—Ä–æ–≤"

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —Ä–µ–≤—å—é–µ—Ä–∞—Ö
                embed.add_field(name="–†–µ–≤—å—é–µ—Ä—ã üîç", value=all_reviewers_str, inline=True)
            else:
                embed.add_field(name="–†–µ–≤—å—é–µ—Ä—ã üîç", value=", ".join(requested_reviewers_logins), inline=True)

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫—Ç–æ –æ–¥–æ–±—Ä–∏–ª (approved) PR
            reviews_url = f"{pr_url}/reviews"
            reviews_response = GLOBAL_SESSION.get(reviews_url)
            if reviews_response.status_code == 200:
                reviews_data = reviews_response.json()
                approved_reviewers = [review['user']['login'] for review in reviews_data if review['state'] == 'APPROVED']
                if approved_reviewers:
                    approved_reviewers_str = ', '.join(approved_reviewers)
                    embed.add_field(name="–û–¥–æ–±—Ä–µ–Ω–∏–µ üåü", value=approved_reviewers_str, inline=True)
                else:
                    embed.add_field(name="–û–¥–æ–±—Ä–µ–Ω–∏–µ üåü", value="–ù–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–π", inline=True)

            # –ú–µ—Ç–∫–∏ (Labels)
            labels = pr_data.get('labels', [])
            labels_str = ', '.join([f"[{label['name']}]" for label in labels]) if labels else "–ù–µ—Ç –º–µ—Ç–æ–∫ üè∑Ô∏è"
            embed.add_field(name="–ú–µ—Ç–∫–∏ üè∑Ô∏è", value=labels_str, inline=True)

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            comments_count = pr_data['comments']
            embed.add_field(name="–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ üí¨", value=comments_count, inline=True)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
            diffstat_url = f"{pr_url}/files"
            diffstat_response = GLOBAL_SESSION.get(diffstat_url)
            if diffstat_response.status_code == 200:
                diffstat_data = diffstat_response.json()
                added_lines = sum(file['additions'] for file in diffstat_data)
                deleted_lines = sum(file['deletions'] for file in diffstat_data)
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                embed.add_field(name="–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ üîÑ", value=f"–î–æ–±–∞–≤–ª–µ–Ω–æ: +{added_lines}\n–£–¥–∞–ª–µ–Ω–æ: ‚àí{deleted_lines}", inline=True)


            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ –±–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
            created_at = datetime.strptime(pr_data['created_at'], "%Y-%m-%dT%H:%M:%SZ")
            updated_at = datetime.strptime(pr_data['updated_at'], "%Y-%m-%dT%H:%M:%SZ")
            closed_at = pr_data.get('closed_at')  # –î–∞—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–µ—Å–ª–∏ PR –∑–∞–∫—Ä—ã—Ç)
            closed_at_str = ""
            if closed_at:
                closed_at = datetime.strptime(closed_at, "%Y-%m-%dT%H:%M:%SZ")
                closed_at_str = closed_at.strftime("‚Ä¢ –ó–∞–∫—Ä—ã—Ç {0}".format(closed_at.strftime("%d %b %Y, %H:%M")))

            created_at_str = created_at.strftime("%d %b %Y, %H:%M")  # –ù–∞–ø—Ä–∏–º–µ—Ä, 30 Jun 2024, 09:59
            updated_at_str = updated_at.strftime("%d %b %Y, %H:%M")  # –ù–∞–ø—Ä–∏–º–µ—Ä, 30 Jun 2024, 12:16

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ PR —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            embed.set_footer(text=f"PR –æ—Ç–∫—Ä—ã—Ç {created_at_str} ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω {updated_at_str} {closed_at_str}")

            # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–µ —Ç–µ–≥–∏
            if draft:
                embed.set_footer(text=f"–≠—Ç–æ—Ç PR –≤ —Ä–∞–±–æ—Ç–µ. #WIP ‚öôÔ∏è ‚Ä¢ {updated_at_str}")

            # –°—Å—ã–ª–∫–∞ –Ω–∞ PR
            embed.add_field(name="–°—Å—ã–ª–∫–∞ –Ω–∞ PR üîó", value=f"[–ü–µ—Ä–µ–π—Ç–∏ –≤ PR]({pr_data['html_url']})", inline=False)

            return embed

        # –ï—Å–ª–∏ PR –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–∫–∞—Ç—å Issue
        issue_url = f"{base_api_url}/issues/{number}"
        issue_response = GLOBAL_SESSION.get(issue_url)
        if issue_response.status_code == 200:
            issue_data = issue_response.json()
            return f"[{repo_name} Issue {number}]({issue_data['html_url']})"

    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ GitHub API: {e}")

    return None