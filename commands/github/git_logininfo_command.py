import disnake
import aiohttp
import asyncio
from bot_init import bot
from config import AUTHOR, ACTION_GITHUB, REPOSITORIES
from disnake.ext import commands

GRAPHQL_URL = "https://api.github.com/graphql"

# –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞—Ö
graphql_query = """
query($owner: String!, $repo: String!, $cursor: String) {
  repository(owner: $owner, name: $repo) {
    pullRequests(states: [OPEN, CLOSED, MERGED], first: 100, after: $cursor) {
      edges {
        node {
          title
          url
          state
          mergedAt
          createdAt
          author {
            login
          }
          reviews(first: 10) {
            totalCount
          }
          comments(first: 10) {
            totalCount
          }
        }
      }
      pageInfo {
        hasNextPage
        endCursor
      }
    }
  }
}
"""

async def get_github_pull_requests_graphql(username, repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ GraphQL API."""
    headers = {
        "Authorization": f"Bearer {ACTION_GITHUB}",
        "Content-Type": "application/json",
    }

    all_pull_requests = []
    cursor = None
    has_next_page = True
    
    while has_next_page:
        variables = {
            "owner": AUTHOR,
            "repo": repo,
            "username": username,
            "cursor": cursor
        }

        data = {
            "query": graphql_query,
            "variables": variables
        }

        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(GRAPHQL_URL, json=data, headers=headers) as response:
                    response.raise_for_status()
                    result = await response.json()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ 'data'
                    if 'data' not in result:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ. –û—Ç–≤–µ—Ç: {result}")
                        return []

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã
                    pull_requests = result['data']['repository']['pullRequests']['edges']
                    for pr in pull_requests:
                        node = pr['node']
                        if node['author']['login'] == username:
                            pr_data = {
                                'url': node['url'],
                                'state': node['state'],
                                'merged_at': node['mergedAt'],
                                'reviews': node['reviews']['totalCount'],
                                'comments': node['comments']['totalCount']
                            }
                            all_pull_requests.append(pr_data)

                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å–æ—Ä –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    page_info = result['data']['repository']['pullRequests']['pageInfo']
                    has_next_page = page_info['hasNextPage']
                    cursor = page_info['endCursor']

            except aiohttp.ClientError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return []

    return all_pull_requests

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
async def get_github_user_info(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub."""
    url = f'https://api.github.com/users/{username}'
    
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                response.raise_for_status()
                user_info = await response.json()
                return user_info
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

@bot.command(
    name="git_logininfo",
    help="–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."
)
async def git_logininfo(ctx, username: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –µ–≥–æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    """
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}...")

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = await get_github_user_info(username)

    if not user_info:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    repo = 'space_station_ADT'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo}...")

    user_pull_requests = await get_github_pull_requests_graphql(username, repo)

    if not user_pull_requests:
        print(f"‚ùå –ù–µ—Ç –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo}.")
        await ctx.send(f"‚ùå –ù–µ—Ç –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo}.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤
    merged_prs = 0
    closed_prs = 0
    open_prs = 0
    draft_prs = 0
    total_reviews = 0
    total_discussions = 0
    total_prs = len(user_pull_requests)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã
    for pr in user_pull_requests:
        pr_state = pr['state']
        pr_url = pr['url']
        print(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç: {pr_url}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {pr_state}")

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        if pr_state == 'CLOSED' and pr['merged_at']:  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –±—ã–ª –∑–∞–º–µ—Ä–∂–µ–Ω
            merged_prs += 1
        elif pr_state == 'CLOSED':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç
            closed_prs += 1
        elif pr_state == 'OPEN':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç
            open_prs += 1
        elif pr_state == 'DRAFT':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –≤ –¥—Ä–∞—Ñ—Ç–µ
            draft_prs += 1

        total_reviews += pr['reviews']
        total_discussions += pr['comments']

    # –°–æ–∑–¥–∞—ë–º Embed —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    embed = disnake.Embed(
        title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub: {username} üë§",
        description=f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{username}`\n**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è**: `{AUTHOR}`",
        color=disnake.Color.green(),
        timestamp=disnake.utils.utcnow()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    embed.add_field(
        name="üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        value=f"**–ò–º—è**: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–ü–æ–¥–ø–∏—Å–∫–∏**: {user_info.get('following', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–ü–æ–¥–ø–∏—Å—á–∏–∫–∏**: {user_info.get('followers', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏**: {user_info.get('public_repos', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    embed.add_field(
        name="üîß –í–∫–ª–∞–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
        value=f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤**: {total_prs}\n"
              f"**–ó–∞–º–µ—Ä–∂–µ–Ω–Ω—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {merged_prs}\n"
              f"**–ó–∞–∫—Ä—ã—Ç—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {closed_prs}\n"
              f"**–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {open_prs}\n"
              f"**–ü—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã –≤ –¥—Ä–∞—Ñ—Ç–µ**: {draft_prs}\n"
              f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é**: {total_reviews}\n"
              f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫—É—Å—Å–∏–π**: {total_discussions}",
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    embed.set_thumbnail(url=user_info.get('avatar_url', 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'))
    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author.display_name}", icon_url=ctx.author.avatar.url)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed –≤ –∫–∞–Ω–∞–ª
    await ctx.send(embed=embed)