import disnake
import aiohttp
from bot_init import bot
from config import AUTHOR, ACTION_GITHUB, REPOSITORIES
from disnake.ext import commands

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ GitHub
async def get_github_user_info(username):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    url = f'https://api.github.com/users/{username}'
    
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(url, headers=headers) as response:
                response.raise_for_status()
                user_info = await response.json()
                return user_info
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)
async def get_github_pull_requests(username, repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (—Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π)."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/pulls?state=all&per_page=100&page=1'
    
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    all_pull_requests = []
    while url:
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers) as response:
                    response.raise_for_status()
                    pull_requests = await response.json()
                    all_pull_requests.extend(pull_requests)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                    if 'link' in response.headers and 'rel="next"' in response.headers['link']:
                        # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
                        url = response.headers['link'].split(';')[0][1:-1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º URL
                    else:
                        break  # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
        except aiohttp.ClientError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤: {e}")
            break

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã –ø–æ –∞–≤—Ç–æ—Ä—Å—Ç–≤—É
    user_pull_requests = [pr for pr in all_pull_requests if pr['user']['login'] == username]
    return user_pull_requests

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–≤—å—é –≤ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞—Ö
async def get_github_reviews(pr_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é –¥–ª—è –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{pr_url}/reviews', headers={
                "Accept": "application/vnd.github.v3+json",
                "Authorization": f"Bearer {ACTION_GITHUB}"
            }) as response:
                response.raise_for_status()
                reviews = await response.json()
                print(f"Reviews for PR {pr_url}: {len(reviews)}")
                return len(reviews)  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–≤—å—é –¥–ª—è –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–∏—Å–∫—É—Å—Å–∏–π –≤ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞—Ö
async def get_github_discussions(pr_url):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫—É—Å—Å–∏–π –¥–ª—è –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f'{pr_url}/comments', headers={
                "Accept": "application/vnd.github.v3+json",
                "Authorization": f"Bearer {ACTION_GITHUB}"
            }) as response:
                response.raise_for_status()
                discussions = await response.json()
                print(f"Discussions for PR {pr_url}: {len(discussions)}")
                return len(discussions)  # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    except aiohttp.ClientError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –¥–ª—è –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞: {e}")
        return 0

@bot.command(
    name="git_logininfo",
    help="–í—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –µ–≥–æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π."
)
async def git_logininfo(ctx, username: str):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏ –µ–≥–æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π.
    """
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {username}...")
    user_info = await get_github_user_info(username)

    if not user_info:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ª–æ–≥–∏–Ω–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    repo = 'space_station_ADT'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∫–ª–∞–¥–∞
    print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è {repo}...")
    user_pull_requests = await get_github_pull_requests(username, repo)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤
    merged_prs = 0
    closed_prs = 0
    open_prs = 0
    draft_prs = 0
    total_reviews = 0
    total_discussions = 0

    for pr in user_pull_requests:
        pr_state = pr['state']
        pr_url = pr['url']

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–æ–≤ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
        if pr_state == 'closed' and pr['merged_at']:  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –±—ã–ª –∑–∞–º–µ—Ä–∂–µ–Ω
            merged_prs += 1
        elif pr_state == 'closed':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç
            closed_prs += 1
        elif pr_state == 'open':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –æ—Ç–∫—Ä—ã—Ç
            open_prs += 1
        elif pr_state == 'draft':  # –ï—Å–ª–∏ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç –≤ –¥—Ä–∞—Ñ—Ç–µ
            draft_prs += 1

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é –∏ –¥–∏—Å–∫—É—Å—Å–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç–∞
        total_reviews += await get_github_reviews(pr_url)
        total_discussions += await get_github_discussions(pr_url)

    # –°–æ–∑–¥–∞—ë–º Embed —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    embed = disnake.Embed(
        title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ GitHub: {username} üë§",
        description=f"**–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**: `{username}`\n**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è**: `{AUTHOR}`",
        color=disnake.Color.green(),
        timestamp=disnake.utils.utcnow()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    embed.add_field(
        name="üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        value=f"**–ò–º—è**: {user_info.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–ü–æ–¥–ø–∏—Å–∫–∏**: {user_info.get('following', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–ü–æ–¥–ø–∏—Å—á–∏–∫–∏**: {user_info.get('followers', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
              f"**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏**: {user_info.get('public_repos', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}",
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∫–ª–∞–¥–µ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
    embed.add_field(
        name="üîß –í–∫–ª–∞–¥ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π",
        value=f"**–ó–∞–º–µ—Ä–∂–µ–Ω–Ω—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {merged_prs}\n"
              f"**–ó–∞–∫—Ä—ã—Ç—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {closed_prs}\n"
              f"**–û—Ç–∫—Ä—ã—Ç—ã–µ –ø—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã**: {open_prs}\n"
              f"**–ü—É–ª–ª-—Ä–µ–∫–≤–µ—Å—Ç—ã –≤ –¥—Ä–∞—Ñ—Ç–µ**: {draft_prs}\n"
              f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≤—å—é**: {total_reviews}\n"
              f"**–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏—Å–∫—É—Å—Å–∏–π**: {total_discussions}",
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    embed.set_thumbnail(url=user_info.get('avatar_url', 'https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png'))
    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author.display_name}", icon_url=ctx.author.avatar.url)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed –≤ –∫–∞–Ω–∞–ª
    await ctx.send(embed=embed)

