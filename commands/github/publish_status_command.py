import disnake
import requests
from bot_init import bot
from config import AUTHOR, REPOSITORIES, ACTION_GITHUB
from disnake.ext import commands

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–µ–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤
def truncate_text(text, max_length=1024):
    return text[:max_length - 3] + "..." if len(text) > max_length else text

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ workflow
def get_last_workflow_run(repository):
    url = f'https://api.github.com/repos/{AUTHOR}/{REPOSITORIES[repository]}/actions/workflows/publish-adt.yml/runs'
    headers = {"Accept": "application/vnd.github.v3+json", "Authorization": f"Bearer {ACTION_GITHUB}"}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        runs = response.json().get("workflow_runs", [])
        return runs[0] if runs else None
    except requests.RequestException:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —à–∞–≥–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
def get_run_steps(run_id, repository):
    url = f'https://api.github.com/repos/{AUTHOR}/{REPOSITORIES[repository]}/actions/runs/{run_id}/jobs'
    headers = {"Accept": "application/vnd.github.v3+json", "Authorization": f"Bearer {ACTION_GITHUB}"}
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        return response.json().get("jobs", [])
    except requests.RequestException:
        return []

# –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–æ–≤ —Å —Ü–≤–µ—Ç–∞–º–∏ –∏ —ç–º–æ–¥–∑–∏
def translate_status(status):
    status_translation = {
        "in_progress": ("–í –ø—Ä–æ—Ü–µ—Å—Å–µ", disnake.Color.orange(), "‚è≥"),
        "success": ("–£—Å–ø–µ—Ö", disnake.Color.dark_green(), "üéâ"),
        "completed": ("–ó–∞–≤–µ—Ä—à–µ–Ω–æ", disnake.Color.green(), "‚úÖ"),
        "queued": ("–û–∂–∏–¥–∞–Ω–∏–µ", disnake.Color.yellow(), "‚è∏Ô∏è"),
        "failure": ("–ù–µ—É–¥–∞—á–∞", disnake.Color.red(), "‚ùå"),
    }
    return status_translation.get(status, ("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", disnake.Color.dark_gray(), "‚ùì"))

@bot.command(name="publish_status", help="–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ GitHub Actions workflow 'publish-adt.yml'.")
async def last_publish_tests(ctx, repository: str = "n"):
    if repository not in ['n', 'o']:
        await ctx.send("‚ùå –£–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'n' –∏–ª–∏ 'o'.")
        return

    last_run = get_last_workflow_run(repository)
    # –ï—Å–ª–∏ last_run –µ—Å—Ç—å, —Ç–æ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ —Å—Ç–∞—Ç—É—Å –∏ —Ü–≤–µ—Ç
    if last_run:
        run_status = last_run["status"]
        translated_status, embed_color, _ = translate_status(run_status)
    else:
        embed_color = disnake.Color.dark_gray()  # –¶–≤–µ—Ç –¥–ª—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        translated_status = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å"

    embed = disnake.Embed(
        title="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ Publish",
        description=f"**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π**: `{REPOSITORIES[repository]}`\n**–°—Ç–∞—Ç—É—Å –∑–∞–ø—É—Å–∫–∞**: {translated_status}",
        color=embed_color,
        timestamp=disnake.utils.utcnow()
    )

    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author.display_name}", icon_url=ctx.author.avatar.url)

    if last_run:
        run_id = last_run["id"]
        user, branch = last_run["actor"]["login"], last_run["head_branch"]
        embed.add_field(name="–ó–∞–ø—É—Å–∫", value=f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å**: `{user}`\n**–í–µ—Ç–∫–∞**: `{branch}`", inline=False)

        jobs = get_run_steps(run_id, repository)
        if jobs:
            for job in jobs:
                job_name, job_status = job["name"], job["status"]
                translated_status, color, emoji = translate_status(job_status)
                description = f"**–°—Ç–∞—Ç—É—Å**: {translated_status}"
                embed.add_field(name=f"{emoji} **Publish work**", value=truncate_text(description), inline=False)

                for step in job.get("steps", []):
                    step_name, step_status = step["name"], step["status"]
                    translated_step_status, step_color, step_emoji = translate_status(step_status)
                    step_description = f"**–°—Ç–∞—Ç—É—Å**: {translated_step_status}"
                    embed.add_field(name=f"{step_emoji} {step_name}", value=truncate_text(step_description), inline=True)
        else:
            embed.add_field(name="‚ùì –ù–µ—Ç —à–∞–≥–æ–≤", value="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞.", inline=False)
    else:
        embed.add_field(name="‚ùì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ", value="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—É—Å–∫–µ workflow.", inline=False)

    await ctx.send(embed=embed)
