import requests
import disnake
from disnake.ext import commands
from bot_init import bot
from config import AUTHOR, ACTION_GITHUB


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
def get_github_repo_info(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ GitHub."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        repo_data = response.json()
        return repo_data
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∫—Ä—ã—Ç—ã—Ö Issues –∏ Pull Requests
def get_repo_issues_pr_count(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö Issues –∏ Pull Requests."""
    url_issues = f'https://api.github.com/repos/{AUTHOR}/{repo}/issues'
    url_prs = f'https://api.github.com/repos/{AUTHOR}/{repo}/pulls'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response_issues = requests.get(url_issues, headers=headers)
        response_prs = requests.get(url_prs, headers=headers)
        response_issues.raise_for_status()
        response_prs.raise_for_status()
        
        issues = response_issues.json()
        prs = response_prs.json()
        
        open_issues = len([issue for issue in issues if 'pull_request' not in issue])
        open_prs = len([pr for pr in prs])
        
        return open_issues, open_prs
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ Issues –∏ Pull Requests: {e}")
        return 0, 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
def get_github_repo_stats(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/contributors'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        contributors = response.json()
        return len(contributors)
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤: {e}")
        return 0


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö
def get_last_commits(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/commits'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        commits = response.json()
        if commits:
            last_commit = commits[0]
            commit_msg = last_commit.get('commit', {}).get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
            commit_date = last_commit.get('commit', {}).get('committer', {}).get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞')
            return commit_msg, commit_date
        return '–ù–µ—Ç –∫–æ–º–º–∏—Ç–æ–≤', '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –¥–∞—Ç–∞'
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–æ–≤: {e}")
        return '–û—à–∏–±–∫–∞', '–û—à–∏–±–∫–∞'


def get_repo_licenses(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/license'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        license_data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏—Ü–µ–Ω–∑–∏–π
        licenses = license_data.get('licenses', [])
        
        # –ï—Å–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏–∏ –µ—Å—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö
        if licenses:
            return [license.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è') for license in licenses]
        else:
            return ['–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è']
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—Ü–µ–Ω–∑–∏–π: {e}")
        return ['–ù–µ —É–∫–∞–∑–∞–Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏—è']


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–∫–æ–≤
def get_forks_count(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        repo_data = response.json()
        return repo_data.get('forks_count', 0)
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–æ—Ä–∫–æ–≤: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
def get_discussions_count(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/discussions'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        discussions = response.json()
        return len(discussions)
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ª–∏–∑–æ–≤
def get_releases_count(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–∏–∑–æ–≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}/releases'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        releases = response.json()
        return len(releases)
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–ª–∏–∑–æ–≤: {e}")
        return 0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
def get_repo_size(repo):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤ –±–∞–π—Ç–∞—Ö –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ –ú–ë."""
    url = f'https://api.github.com/repos/{AUTHOR}/{repo}'
    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }
    
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        repo_data = response.json()
        size_in_bytes = repo_data.get('size', 0)
        size_in_mb = size_in_bytes / (1024 * 1024)  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–µ–≥–∞–±–∞–π—Ç—ã
        return round(size_in_mb, 2)
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {e}")
        return 0

@bot.command(
    name="git_repoinfo",
    help="–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ AdventureTimeSS14/space_station_ADT."
)
async def git_repoinfo(ctx):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ AdventureTimeSS14/space_station_ADT.
    """
    repo = 'space_station_ADT'  # –£–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    repo_info = get_github_repo_info(repo)

    if not repo_info:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö Issues –∏ Pull Requests
    open_issues, open_prs = get_repo_issues_pr_count(repo)

    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    contributors = get_github_repo_stats(repo)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–æ–º–º–∏—Ç–∞—Ö
    last_commit_msg, last_commit_date = get_last_commits(repo)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    repo_license = get_repo_licenses(repo)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–æ—Ä–∫–æ–≤
    forks_count = get_forks_count(repo)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    discussions_count = get_discussions_count(repo)

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–∏–∑–æ–≤
    releases_count = get_releases_count(repo)

    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
    repo_size = get_repo_size(repo)

    # –°–æ–∑–¥–∞—ë–º Embed —Å –∫—Ä–∞—Å–∏–≤—ã–º –¥–∏–∑–∞–π–Ω–æ–º
    embed = disnake.Embed(
        title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ {repo} üì¶",
        description=f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è**: `{AUTHOR}`\n**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π**: `{repo}`",
        color=disnake.Color.dark_gold(),
        timestamp=disnake.utils.utcnow()
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    embed.add_field(
        name="üìù –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        value=(
            f"**–û–ø–∏—Å–∞–Ω–∏–µ**: {repo_info.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}\n"
            f"**–°–æ–∑–¥–∞–Ω**: {repo_info.get('created_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"**–û–±–Ω–æ–≤–ª–µ–Ω**: {repo_info.get('updated_at', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"**–ó–≤–µ–∑–¥—ã**: {repo_info.get('stargazers_count', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"**–§–æ—Ä–∫–∏**: {forks_count}\n"
            f"**–Ø–∑—ã–∫**: {repo_info.get('language', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}"
        ),
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö Issues –∏ Pull Requests
    embed.add_field(
        name="üîß –û—Ç–∫—Ä—ã—Ç—ã–µ Issues –∏ PR",
        value=(
            f"**–û—Ç–∫—Ä—ã—Ç—ã–µ Issues**: {open_issues}\n"
            f"**–û—Ç–∫—Ä—ã—Ç—ã–µ Pull Requests**: {open_prs}"
        ),
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤
    embed.add_field(
        name="üíª –ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã",
        value=f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä–æ–≤**: {contributors}",
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—Ü–µ–Ω–∑–∏–∏
    embed.add_field(
        name="üîí –õ–∏—Ü–µ–Ω–∑–∏—è",
        value=repo_license,
        inline=False
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –∏ —Ä–µ–ª–∏–∑–æ–≤
    embed.add_field(
        name="üí¨ –û–±—Å—É–∂–¥–µ–Ω–∏—è –∏ —Ä–µ–ª–∏–∑—ã",
        value=(
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–π**: {discussions_count}\n"
            f"**–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–ª–∏–∑–æ–≤**: {releases_count}"
        ),
        inline=False
    )
    
    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author.display_name}", icon_url=ctx.author.avatar.url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    await ctx.send(embed=embed)
