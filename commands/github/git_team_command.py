import disnake
import requests
from bot_init import bot
from config import AUTHOR, ACTION_GITHUB
from disnake.ext import commands

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub
def get_github_org_members():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub."""
    url = f'https://api.github.com/orgs/{AUTHOR}/members'

    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
        members = response.json()   # –ü–æ–ª—É—á–∞–µ–º JSON-–æ—Ç–≤–µ—Ç —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
        return [member['login'] for member in members]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (admins) –∏–∑ –∫–æ–º–∞–Ω–¥
def get_github_org_owners():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ (admins) –∏–∑ –∫–æ–º–∞–Ω–¥—ã."""
    url = f'https://api.github.com/orgs/{AUTHOR}/teams'

    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        teams = response.json()
        return teams
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub
def get_github_teams():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub."""
    url = f'https://api.github.com/orgs/{AUTHOR}/teams'

    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        teams = response.json()
        return teams
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {e}")
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
def get_team_members(team_slug):
    """–ü–æ–ª—É—á–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–∞ GitHub."""
    url = f'https://api.github.com/orgs/{AUTHOR}/teams/{team_slug}/members'

    headers = {
        "Accept": "application/vnd.github.v3+json",
        "Authorization": f"Bearer {ACTION_GITHUB}"
    }

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        members = response.json()
        return [member['login'] for member in members]
    except requests.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã {team_slug}: {e}")
        return []

@bot.command(
    name="git_team",
    help="–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub."
)
async def git_team(ctx):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub.
    """
    members = get_github_org_members()
    teams = get_github_teams()

    if not members:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏.")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    owners_slug = None
    mainteiners_slug = None

    # –ü–æ–∏—Å–∫ –∫–æ–º–∞–Ω–¥ –ø–æ slug
    for team in teams:
        if team['slug'] == 'owners':
            owners_slug = team['slug']
        elif team['slug'] == 'adt_maintainer':
            mainteiners_slug = team['slug']

    if not owners_slug:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (owners).")
        return

    if not mainteiners_slug:
        await ctx.send("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–∞–Ω–¥—É –º–µ–π–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ (adt_mainteiner).")
        return

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    owners = get_team_members(owners_slug)
    mainteiners = get_team_members(mainteiners_slug)

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    sorted_owners = [member for member in members if member in owners]
    sorted_mainteiners = [member for member in members if member in mainteiners and member not in owners]
    sorted_members = [member for member in members if member not in owners and member not in mainteiners]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è embed
    owners_list = "üëë " + "\nüëë ".join([f"**{owner}**" for owner in sorted_owners])
    mainteiners_list = "üõ†Ô∏è " + "\nüõ†Ô∏è ".join([f"**{member}**" for member in sorted_mainteiners])
    members_list = "üë§ " + "\nüë§ ".join([f"**{member}**" for member in sorted_members])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è
    combined_list = f"{owners_list}\n\n{mainteiners_list}\n\n{members_list}"
    if len(combined_list) > 2000:
        combined_list = combined_list[:2000] + "..."

    # –°–æ–∑–¥–∞–Ω–∏–µ Embed
    embed = disnake.Embed(
        title="üåü –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–∞ GitHub üöÄ",
        description=f"**–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è**: {AUTHOR}\n\n**–í–ª–∞–¥–µ–ª—å—Ü—ã**:\n{owners_list}\n\n**–ú–µ–π–Ω—Ç–µ–π–Ω–µ—Ä—ã**:\n{mainteiners_list}\n\n**–û—Å—Ç–∞–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏**:\n{members_list}",
        color=disnake.Color.dark_grey(),
        timestamp=disnake.utils.utcnow()
    )

    embed.set_footer(text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç {ctx.author.display_name}", icon_url=ctx.author.avatar.url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Embed –≤ –∫–∞–Ω–∞–ª
    await ctx.send(embed=embed)
